Сегодня мы напишем небольшую игру под названием "Ипподром".
Когда я говорю мы - я имею ввиду тебя. Я же буду работать наставником.

Для начала нам понадобятся классы "ипподром" и "лошадь".
Создай классы Hippodrome (ипподром), Horse (лошадь).

Также не забудь, что любая программа начинается с метода main.
Добавь его в класс Hippodrome.
Требования:

    •
    Класс Hippodrome должен быть создан в отдельном файле.
    •
    Класс Horse должен быть создан в отдельном файле.
    •
    Класс Hippodrome должен быть объявлен с модификатором доступа public.
    •
    Класс Horse должен быть объявлен с модификатором доступа public.
    •
    Метод public static void main(String[] args) должен быть создан в классе Hippodrome.

Ипподром(2)
Раз это ипподром, то на нем должны быть лошади.
Значит наш ипподром должен хранить список всех его лошадей.
Добавь поле horses типа List<Horse> в класс Hippodrome.
А чтобы лошадей не украли - сделай это поле приватным.
Добавь getter для этого поля.


Requirements:
1. В классе Hippodrome должен быть создан список лошадей(horses).
2. В классе Hippodrome должен быть создан метод getHorses возвращающий список horses.
3. Метод getHorses должен быть объявлен с модификатором доступа public.
4. Поле horses должно быть объявлено с модификатором доступа private.

Ипподром(3)
Несмотря на то что мы объявили переменную horses, сам список еще не создан (если ты конечно не успел опередить нас).
Создай конструктор класса Hippodrome с одним параметром типа List.
Сохрани в поле horses полученный в качестве параметра список (инициализируй поле horses).


Requirements:
1. В классе Hippodrome должен быть создан конструктор с одним параметром типа List.
2. Должна существовать возможность создавать объекты типа Hippodrome извне класса с помощью оператора new.
3. Поле horses должно быть корректно инициализировано в конструкторе класса Hippodrome.

Ипподром(4)
Теперь вернемся к лошадям. У каждой лошади на скачках должны быть известны имя (name) и скорость (speed).
Наши лошади будут бежать просто определенное время (100 секунд/"шагов").
Будем определять победителя, как лошадь, пробежавшую наибольшую дистанцию.
Поэтому нам понадобится хранить еще и расстояние (distance), которое лошадь уже пробежала.
Добавь в класс Horse переменные name (String), speed (double), distance (double).


Requirements:
1. В классе Horse должно быть создано поле name.
2. В классе Horse должно быть создано поле speed.
3. В классе Horse должно быть создано поле distance.
4. Поле name должно быть типа String.
5. Поле speed должно быть типа double.
6. Поле distance должно быть типа double.


Ипподром(5)
Закончим написание класса лошадь (Horse).
Добавь конструктор с параметрами (name, speed, distance).
Добавь getter'ы и setter'ы для всех полей класса Horse.
Делай все методы public, если явно не указано обратное.


Requirements:
1. В классе Horse должен быть создан конструктор с параметрами String, double и double (name, speed и distance).
2. Конструктор класса Horse должен корректно инициализировать поля класса в соответствии с полученными параметрами.
3. В классе Horse должны быть созданы getter'ы для всех полей класса.
4. В классе Horse должны быть созданы setter'ы для всех полей класса.
5. Getter'ы класса Horse должны возвращать значения соответствующих полей класса.
6. Setter'ы класса Horse должны устанавливать значения соответствующих полей класса.

Ипподром(6)
Теперь перейдем к классу Hippodrome и методу main.
Нам нужно создать объект типа Hippodrome и добавить ему несколько лошадей.

Для начала, в классе Hippodrome создай статическое поле game типа Hippodrome.

В методе main требуется:
a) Создать список лошадей (horses).
б) Создать три объекта "лошадь". Имена придумай сам. Начальная скорость у всех лошадей - 3, дистанция - 0.
в) Добавить созданных лошадей в список horses.
г) Создать объект типа Hippodrome, используя созданный ранее список лошадей, и сохранить этот объект в поле game.


Requirements:
1. В классе Hippodrome должно быть создано поле game типа Hippodrome.
2. Поле game должно быть статическим.
3. Поле game НЕ должно быть приватным.
4. В методе main должно инициализироваться поле game.
5. В методе main в список лошадей ипподрома должны быть добавлены три лошади.
6. Скорости всех лошадей должны быть равны 3, а дистанции - 0.

Ипподром(7)
Но и это еще не все - надо чтобы лошади бежали.
Добавь в класс Hippodrome void методы run, move и print. Без параметров.
Метод move будет управлять движением всех лошадей.
Метод print отрисовывать их на экран.
А метод run - управлять всем этим.


Requirements:
1. В классе Hippodrome должен быть создан метод void run() без параметров.
2. В классе Hippodrome должен быть создан метод void move() без параметров.
3. В классе Hippodrome должен быть создан метод void print() без параметров.

Ипподром(8)
В методе run сделай цикл от 1 до 100. Это и будет наш забег.
В теле цикла вызываем сначала move, затем print.
Чтобы весь цикл не отработал за долю секунды - добавь в него еще Thread.sleep(200);


Requirements:
1. В методе run класса Hippodrome должен быть 100 раз вызван метод move.
2. В методе run класса Hippodrome должен быть 100 раз вызван метод print.
3. В методе run класса Hippodrome должен быть 100 раз вызван метод Thread.sleep(200).
4. Метод print должен быть вызван после метода move.

Ипподром(9)
Теперь вернемся к методам move и print. Начнем с move.

В методе move класса Hippodrome в цикле у каждой лошади мы вызываем метод move.

Да ты прав, его еще нет у класса Horse.

Поэтому в класс Horse надо добавить свой метод move :)

И метод print, кстати тоже.

Если я не говорю ничего насчет параметров метода, значит метод без параметров.

Делай все методы public, если явно не указано обратное.


Requirements:
1. В классе Horse должен быть создан метод move.
2. В классе Horse должен быть создан метод print.
3. В методе move класса Hippodrome должен быть вызван метод move по одному разу для каждой лошади(каждого элемента списка horses).


Ипподром(10)
Еще нужно написать метод print класса Hippodrome.
В нем тоже все просто: в цикле для каждой лошади вызываем ее метод print.
Ну, и еще выведи после цикла 10 пустых строк: System.out.println() - чтобы было красивее.


Requirements:
1. В методе print класса Hippodrome должен быть вызван метод print по одному разу для каждой лошади(каждого элемента списка horses).
2. В методе print должны быть выведены на экран 10 пустых строк.



Ипподром(11)
С классом Hippodrome почти закончили.
Добавь в конец метода main вызов run().

Подсказка:
run() - это нестатический метод, поэтому вызвать его можно только у объекта.
А где взять объект?

Подсказка 2:
game.run();


Requirements:
1. В методе main должен быть вызван метод run у объекта типа Hippodrome.


Ипподром(12)
Осталось совсем немного - дописать класс Horse.
Каждый ход у лошади будет вызываться метод move.
Когда у лошади вызывают метод move, лошадь должна пробежать некоторую дистанцию.
Дистанция зависит от скорости лошади (speed). В самом простом варианте, выглядеть этот метод должен примерно так: distance += speed;
Но, чтобы было интереснее, давай сделаем так, чтобы скорость все время немного менялась.
Для этого умножь speed на случайное число.
Случайное число можно получить с помощью метода Math.random().


Requirements:
1. В методе move класса Horse значение поля distance должно увеличиваться
на расстояние пройденное за один "ход"(значение поля speed) умноженное
на случайное число от нуля до единицы полученное с помощью вызова метод Math.random().


Ипподром(13)
Теперь вернемся к методу print класса Horse.

Т.к. мы работаем с консолью, то все лошади на бегах будут выглядеть примерно так:
........Slevin
....Lucky
..........Homer

Другими словами, в методе print надо вывести на экран строку состоящую из точек и имени лошади.
Количество точек равно distance, округленному (в меньшую сторону) до целого числа.


Requirements:
1. Метод print должен выводить на экран строку состоящую из точек и имени лошади.
Количество точек равно целой части distance.



Ипподром(14)
Запускаем и любуемся.
У нас каждые полсекунды отображается новый кадр с ситуацией на ипподроме.
Мышкой уменьши размер консоли так, чтобы был виден только один "кадр" и на том же самом месте.

Тогда можно наблюдать забег в живую и даже покомментировать:
- Старт.
- Гомер неожиданно обходит Лаки.
- Слевин вырывается вперед.
- Вперед Лаки!
- 10 баксов на Слевина.
- Похоже Лаки сбросил жокея и расслабился.
- Гомер уверенно вырывается вперед.
- Неожиданно для всех побеждает Гомер. Вот это номер!


Requirements:
1. Расслабься и получай удовольствие.


Ипподром(15)
Добавим определение победителя.
В классе Hippodrome сделаем два метода:
public Horse getWinner() и public void printWinner()

Метод getWinner должен возвращать лошадь пробежавшую самую большую дистанцию.
Метод printWinner выводит на экран имя победителя в виде: Winner is <name>!

Пример:
Winner is Lucky!


Requirements:
1. В классе Hippodrome должен быть создан метод getWinner без параметров.
2. В классе Hippodrome должен быть создан метод printWinner без параметров.
3. Метод getWinner должен возвращать лошадь пробежавшую наибольшую дистанцию.
4. Метод printWinner должен выводить на экран имя победителя на экран в формате заданном в условии задачи.

