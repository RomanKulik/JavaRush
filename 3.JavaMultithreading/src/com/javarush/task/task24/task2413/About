Арканоид(1)
Давай сегодня напишем игру Арканоид.

В оригинале это выглядит примерно так (https://www.youtube.com/watch?v=Th-Z6QQ5AOQ)
Для начала мы напишем упрощенную версию этой игры.
У нас будут кубики, шарик и летающая "подставка", которая не дает шарику упасть.

Поэтому нам понадобятся классы:
а) Arkanoid - класс в котором происходят основные действия. Также в нем будет наша точка входа в программу, метод main.
б) Ball - шарик.
в) Brick - "кирпичи", которые мы сбиваем шариком.
г) Stand - летающая подставка.

Создай их, и не забудь о методе public static void main (String[] args) в классе Arkanoid.


Requirements:
1. Класс Arkanoid должен быть создан в отдельном файле.
2. Класс Ball должен быть создан в отдельном файле.
3. Класс Brick должен быть создан в отдельном файле.
4. Класс Stand должен быть создан в отдельном файле.
5. В классе Arkanoid должен быть создан метод public static void main(String[] args).

Арканоид(2)
Главному классу (Arkanoid) нужно будет хранить информацию о размерах поля, где будут происходить все действия.

Поэтому:
а) добавь в класс Arkanoid два приватных поля width(ширина) и height(высота) типа int
б) создай для них публичные геттеры и сеттеры


Requirements:
1. В классе Arkanoid должно быть создано приватное поле width типа int.
2. В классе Arkanoid должно быть создано приватное поле height типа int.
3. В классе Arkanoid должен быть создан корректный геттер для поля height.
4. В классе Arkanoid должен быть создан корректный геттер для поля width.
5. В классе Arkanoid должен быть создан корректный сеттер для поля height.
6. В классе Arkanoid должен быть создан корректный сеттер для поля width.

Арканоид(3)
Пожалуй, пора добавить конструктор в класс Arkanoid.
Конструктор должен принимать два параметра типа int (width и height) и корректно устанавливать значения соответствующих полей класса.


Requirements:
1. В классе Arkanoid должен быть создан публичный конструктор с двумя параметрами типа int.
2. Конструктор класса Arkanoid должен корректно устанавливать значения соответствующих полей класса.


Арканоид(4)
Также классу Arkanoid нужно будет хранить ссылку на шарик (Ball), "подставку" (Stand) и список "кирпичей" (List<Brick>).

Нужно в классе Arkanoid:
а) создать приватное поле ball типа Ball
б) создать приватное поле stand типа Stand
в) создать приватное поле bricks типа List<Brick>
г) добавить для них публичные геттеры и сеттеры


Requirements:
1. В классе Arkanoid должно быть создано приватное поле ball типа Ball.
2. В классе Arkanoid должно быть создано приватное поле stand типа Stand.
3. В классе Arkanoid должно быть создано приватное поле bricks типа List<Brick>.
4. В классе Arkanoid должен быть создан корректный геттер для поля ball.
5. В классе Arkanoid должен быть создан корректный геттер для поля stand.
6. В классе Arkanoid должен быть создан корректный геттер для поля bricks.
7. В классе Arkanoid должен быть создан корректный сеттер для поля ball.
8. В классе Arkanoid должен быть создан корректный сеттер для поля stand.
9. В классе Arkanoid должен быть создан корректный сеттер для поля bricks.


Арканоид(5)
Чего еще не хватает классу Arkanoid?
Во-первых ему нужен метод run(), в котором будет описана основная логика программы.
Еще нужен метод move() - который будет двигать на один шаг все объекты требующие движения.
Создай методы run() и move().

Еще нам понадобится НЕ приватная статическая переменная game типа Arkanoid, которая будет хранить ссылку на созданный экземпляр класса Arkanoid.

Выглядеть это должно примерно так:
static Arkanoid game;


Requirements:
1. В классе Arkanoid должен быть создан метод void run() без параметров.
2. В классе Arkanoid должен быть создан метод void move() без параметров.
3. Метод run должен быть доступен извне класса Arkanoid.
4. Метод move должен быть доступен извне класса Arkanoid.
5. В классе Arkanoid должно быть создано не приватное статическое поле game типа Arkanoid.


Арканоид(6)
У нас будут "кирпичи", "шарик" и "подставка" и у них будет много общего.
Они будут перемещаться по полю и отрисовываться.
Значит у них у всех будут координаты и размер.
А еще методы move() - для перемещения и draw() для отрисовки.

Есть интересное предложение: давай введем один базовый класс для всех объектов.
Пусть это будет класс BaseObject.
А классы Ball, Stand, Brick от него наследуются.

Создай класс BaseObject и добавь его родителем к классам Ball, Stand, Brick.

Еще нам понадобится класс Canvas.
Он будет ответственным за "отрисовку" объектов.
С помощью его они будут отрисовывать себя.
Вернее даже на нем, но детали я сообщу позднее.

Создай и этот класс.


Requirements:
1. Публичный класс BaseObject должен быть создан в отдельном файле.
2. Класс Canvas должен быть создан в отдельном файле.
3. Класс Ball должен быть потомком класса BaseObject.
4. Класс Brick должен быть потомком класса BaseObject.
5. Класс Stand должен быть потомком класса BaseObject.


Арканоид(7)
Теперь перейдем к классу BaseObject.
Я хочу сделать несколько предложений.

Во-первых для простоты считать что все объекты у нас будут круглыми.
Нет, отрисовывать их мы будем фигурными, как и раньше.
А вот при расчетах из взаимодействия исходить из того, что они круглые.
Так - гораздо проще.

Во-вторых. Пусть координаты объектов и радиус будут вещественными числами.
Это придаст плавность движениям и точность всем вычислениям.
А при отрисовке мы будем их округлять.

Итак:
а) Добавь в класс BaseObject приватные поля x (double), y (double), radius (double).
б) Добавь геттеры и сеттеры.
в) Добавь конструктор BaseObject(double x, double y, double radius).
г) Пройдись по всем классам-наследникам и поправь у них конструкторы.

Если ты используешь Intellij IDEA - Alt+Insert тебе в помощь.


Requirements:
1. В классе BaseObject должно быть создано приватное поле x типа double.
2. В классе BaseObject должно быть создано приватное поле y типа double.
3. В классе BaseObject должно быть создано приватное поле radius типа double.
4. В классе BaseObject должен быть создан корректно работающий конструктор с тремя параметрами типа double (x, y, radius).
5. В классе Ball должен быть создан корректно работающий конструктор с тремя параметрами типа double (x, y, radius).
6. В классе Brick должен быть создан корректно работающий конструктор с тремя параметрами типа double (x, y, radius).
7. В классе Stand должен быть создан корректно работающий конструктор с тремя параметрами типа double (x, y, radius).
8. В классе BaseObject должен быть создан публичный геттер для поля x.
9. В классе BaseObject должен быть создан публичный геттер для поля y.
10. В классе BaseObject должен быть создан публичный геттер для поля radius.
11. В классе BaseObject должен быть создан публичный сеттер для поля x.
12. В классе BaseObject должен быть создан публичный сеттер для поля y.
13. В классе BaseObject должен быть создан публичный сеттер для поля radius.


