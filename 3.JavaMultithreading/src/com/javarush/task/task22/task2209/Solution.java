package com.javarush.task.task22.task2209;

/*
–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–ª–æ–≤
–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–ª–æ–≤: Arrays.sort(words, (o1, o2) -> { —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ
–í –º–µ—Ç–æ–¥–µ main —Å—á–∏—Ç–∞–π —Å –∫–æ–Ω—Å–æ–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞,
–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.
–í –º–µ—Ç–æ–¥–µ getLine –∏—Å–ø–æ–ª—å–∑—É—è StringBuilder
 —Ä–∞—Å—Å—Ç–∞–≤—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
 —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
 —Å–æ–≤–ø–∞–¥–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä.
–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å 1 —Ä–∞–∑.
–°—á–∏—Ç–∞–π, —á—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
—Å–ø–∏—Å–∫–∞ –º–æ–≥—É—Ç (–∏ –¥–æ–ª–∂–Ω—ã!) –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –Ω–µ—Ç).
–ú–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª—é–±–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
–≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–∫–æ–≤—ã—Ö (—Å–º. –ø—Ä–∏–º–µ—Ä).
–°–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–±–µ–ª–æ–º.
–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω.

–ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
–ö–∏–µ–≤ –ù—å—é-–ô–æ—Ä–∫ –ê–º—Å—Ç–µ—Ä–¥–∞–º –í–µ–Ω–∞ –ú–µ–ª—å–±—É—Ä–Ω

–†–µ–∑—É–ª—å—Ç–∞—Ç:
–ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤ –í–µ–Ω–∞
–∏–ª–∏
–í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤
–∏–ª–∏
–ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤ –í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º
–∏ —Ç.–ø.


Requirements:
1. –ú–µ—Ç–æ–¥ main –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
2. –í –∫–ª–∞—Å—Å–µ Solution –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π.
3. –í –º–µ—Ç–æ–¥–µ getLine –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω StringBuilder.
4. –ú–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
(–ø—É—Å—Ç–æ–π StringBuilder) –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –µ–º—É –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–≤–∞).
5. –ú–µ—Ç–æ–¥ getLine –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–≤–∞).
6. –í—Å–µ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Å—Ç—Ä–æ–∫—É.
7. –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏.

–¢–µ—Å—Ç—ã
–†–µ—à–∏–ª–∞ —Å–æ —Å—Ç—ã–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å –∫–∞–∫–æ–π –ø–æ–ø—ã—Ç–∫–∏! üòÄ
–û—Ç —Ä–∞–¥–æ—Å—Ç–∏ –¥–µ–ª—é—Å—å —Ç–µ—Å—Ç–∞–º–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö:
–¢–µ—Å—Ç 1:   –ö–∏–µ–≤ –í–∏–Ω–Ω–∏—Ü–∞ –ù—å—é-–ô–æ—Ä–∫ –ö–∏—Ä–æ–≤ –ê–º—Å—Ç–µ—Ä–¥–∞–º –í–µ–Ω–∞ –ú–µ–ª—å–±—É—Ä–Ω
–¢–µ—Å—Ç 2:   –ö–∏–µ–≤ –ù—å—é-–ô–æ—Ä–∫ –ê—Ñ–∏–Ω—ã –ü—Ä–∞–≥–∞ –í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –ê–ª—É—à—Ç–∞
–¢–µ—Å—Ç 3:  –í–µ–Ω–µ—Ü–∏—è –Ø–ª—Ç–∞ –ú–∏–Ω—Å–∫ –ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–æ—Å–∫–≤–∞ –ê–ª—É—à—Ç–∞ –ê—Ç–ª–∞–Ω—Ç–∞ –ê—Ñ–∏–Ω—ã –´—Å–∏—Ç–∏ –°—Ç–æ–ª—å–∫–æ–ª—å–º –ò—Å–±—É–∫ –ö—É—Ä—Å–∫ –ö–∏—à–∏–Ω–µ–≤ –í–µ–Ω–∞ –ê—Å—Ç—Ä–∞—Ö–∞–Ω—å –¨—Å–∏—Ç–∏ –ò–µ—Ä—É—Å–∞–ª–∏–º –ú—é–Ω—Ö–µ–Ω –ù–æ—Ä–∏–ª—å—Å–∫ –ö–∞–Ω–∑–∞—Å –ö–∏–µ–≤
–¢–µ—Å—Ç 4:  –ö–∏–µ–≤ –ù—å—é-–ô–æ—Ä–∫ –ê–º—Å—Ç–µ—Ä–¥–∞–º –í–µ–Ω–∞ –ú–µ–ª—å–±—É—Ä–Ω –ú–∏–ª–∞–Ω
–¢–µ—Å—Ç 5:  –ê–Ω—Ç–≤–µ—Ä–ø–µ–Ω –ü—Ä–∞–≥–∞ –ê–ª—É—à—Ç–∞
–¢–µ—Å—Ç 6:  –ö–∏–µ–≤ –ù—å—é-–ô–æ—Ä–∫ –†–æ—Ç—Ç–µ—Ä–¥–∞–º –í–µ–Ω–∞ –ú–µ–ª—å–±—É—Ä–Ω
–¢–µ—Å—Ç 7:  –î–µ—Ä–±–µ–Ω—Ç –Ø–∫—É—Ç—Å–∫ –ê—Ä–∑–∞–º–∞—Å –†–æ–≥ –ö–∏–µ–≤ –ö—É–≤—à–∏–Ω–æ–≤–æ –ö–∞–ø—É—Å—Ç–∏–Ω-–Ø—Ä –°—Ç–æ–∫–≥–æ–ª—å–º –§–ª–æ—Ä–µ–Ω—Ü–∏—è –ì–ª–µ–Ω-–•–æ–ø –¢–æ–±–æ–ª—å—Å–∫ –ù—å—é-–ô–æ—Ä–∫ –ê—Ñ–∏–Ω—ã –ú—É—Ä–æ–º –û—Å—Ç–∞—à–∫–æ–≤ –ü—Ä–∞–≥–∞ –ö–æ—Å—Ç—Ä–æ–º–∞ –í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –í–æ–ª–≥–æ–≥—Ä–∞–¥ –ú–∏–Ω—Å–∫
–ü–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –ø—Ä–æ—à–ª–∏ –≤—Å–µ —Ç–µ—Å—Ç—ã
*/

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Solution {
    // –õ–∏—Å—Ç –ª–∏—Å—Ç–æ–≤ —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏
    private static List<List<String>> resultList = new ArrayList<>();

    public static void main(String[] args) {
        List<String> fileLines = new ArrayList<>();
        try (BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
             BufferedReader fr = new BufferedReader(new FileReader(br.readLine()))) {
            while (fr.ready()) {
                fileLines.addAll(Arrays.asList(fr.readLine().split(" ")));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        String[] strings = new String[fileLines.size()];
        for (int i = 0; i < strings.length; i++) {
            strings[i] = fileLines.get(i);
        }

        StringBuilder result = getLine(strings);
        System.out.println(result.toString());
    }

    public static StringBuilder getLine(String... wordss) {
        if (wordss.length == 0)
            return new StringBuilder();

        // –ú–µ—Ç–æ–¥ getLine –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–≤–∞).
        String[] wordsStringArr = Arrays.copyOf(wordss, wordss.length);
        List<String> wordsListArr = new ArrayList<>();
        Collections.addAll(wordsListArr, wordsStringArr);
        //System.out.println("wordsListArr: " + wordsListArr);

        //getSortedListByEndToStartLetter(wordsListArr);
        recursionMethod(wordsStringArr, wordsStringArr.length);

        //System.out.println("result size = " + resultList.size());
        //printList(resultList);

        // –£–¥–∞–ª—è–µ—Ç —Å–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç —É—Å–ª–æ–≤–∏—é
        // –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞
        // —Ä–∞–≤–Ω–∞ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
        deleteBadStrings(resultList);

       // printList(resultList);

        return printStringFromResult(0);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç StringBuilder –∏–∑ resultList
    public static StringBuilder printStringFromResult(int index){
        ArrayList<String> arr = new ArrayList<>(resultList.get(index));
        StringBuilder sb = new StringBuilder();
        for (String s: arr){
            sb.append(s).append(" ");
        }
        return sb.deleteCharAt(sb.length()-1); // –≤–µ—Ä–Ω—É—Ç—å –±–µ–∑ –ø—Ä–æ–±–µ–ª–∞ –≤ –∫–æ–Ω—Ü–µ
    }

    public static void deleteBadStrings(List<List<String>> list) {
        for (int i = 0; i < list.size(); i++) {
            if(!isStringTrue(list.get(i))){
                list.remove(i);
                i--;
            }
        }
    }

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ —Ä–∞–≤–Ω–∞
    // –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
    private static boolean isStringTrue(List<String> strings) {
        for (int i = 0; i < strings.size() - 1; i++) {
            String firstWord = strings.get(i).toLowerCase();
            char ch1 = firstWord.charAt(firstWord.length() - 1);
            String secondWord = strings.get(i + 1).toLowerCase();
            char ch2 = secondWord.charAt(0);
            if (ch1 != ch2)
                return false;
        }
        return true;
    }


    // –í—ã–≤–æ–¥ List —á–µ—Ä–µ–∑ StringBuilder
    public static void printList(List<List<String>> list) {
        // –í—ã–≤–æ–¥ –ø–æ–ª—è resultList
        for (List<String> ls : list) {
            StringBuilder sb = new StringBuilder();
            for (String s : ls) {
                sb.append(s).append(" ");
            }
            System.out.println(sb.toString().trim());
        }
    }


    // return List —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫ —Å–ª–æ–≤ –≤ –≤–∏–¥–µ –ª–∏—Å—Ç–æ–≤
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞
    public static void recursionMethod(String[] strings, int size) {
        // –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        if (size < 2) {
            resultList.add(new ArrayList<>(Arrays.asList(strings)));
        } else {
            for (int i = 0; i < size; i++) {
                swap(strings, i, size - 1);
                recursionMethod(strings, size - 1);
                swap(strings, size - 1, i);
            }
        }
    }

    public static void swap(String[] strings, int i, int k) {
        String tmp = strings[i];
        strings[i] = strings[k];
        strings[k] = tmp;
    }

    public static List<String> getSortedListByEndToStartLetter(List<String> list) {
        List<String> copyOfList = new ArrayList<>(list);
        // –µ—Å–ª–∏ —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ from –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –µ–≥–æ –≤ –º–∞—Å—Å–∏–≤ to, —É–¥–∞–ª—è—è –∏–∑ from
        List<String> from = new ArrayList<>(copyOfList);
        List<String> to = new ArrayList<>();
        // –ò–Ω–¥–µ–∫—Å —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä–æ–µ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∏–∑ From –≤ –º–∞—Å—Å–∏–≤ –¢–æ
        int indexOfTheFirstWordFromFrom = 0;
        int indexTo = 0; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ –¢–æ, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–ª–æ–≤–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–æ–π
        int indexFrom = 0; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ from, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π
        to.add(from.get(indexOfTheFirstWordFromFrom)); // –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –¢–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
        from.remove(indexOfTheFirstWordFromFrom); // —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ from –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –¢–æ —Å–ª–æ–≤–æ


        while (from.size() > 0) {
            String firstWord = to.get(indexTo); // –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¢–æ
            // –ü–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            char endOffirstWord = firstWord.toLowerCase().charAt(firstWord.length() - 1);
            String nextWord = from.get(indexFrom); // –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ from
            // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Å–ª–æ–≤–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
            char startOfNextWord = nextWord.toLowerCase().charAt(0);

            if (endOffirstWord == startOfNextWord) {
                to.add(from.get(indexFrom));
                from.remove(indexFrom);
                indexTo++; // –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º—É —Å–ª–æ–≤—É –≤ –º–∞—Å—Å–∏–≤–µ to
                indexFrom = 0; // –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–±–æ—Ä –ø–æ –º–∞—Å—Å–∏—É from —Å–Ω–∞—á–∞–ª–∞
            } else {
                indexFrom++; // –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É –≤ –º–∞—Å—Å–∏–≤–µ from
            }
        }

        // –ï—Å–ª–∏ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥ –Ω–µ –ø—Ä–∏–≤–µ–ª –∫ —É—Å–ø–µ—Ö—É:
        // –µ—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –º–∞—Å—Å–∏–≤–∞ from –∏ –º–∞—Å—Å–∏–≤ to –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω,
        // –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞—Å—Å–∏–≤—ã –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ to —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ,
        // –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ
        if (indexFrom >= from.size() - 1 && to.size() != copyOfList.size()) {
            // –ü—Ä–∏–≤–µ—Å—Ç–∏ –º–∞—Å—Å–∏–≤—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            from.removeAll(from);
            from.addAll(copyOfList);
            to.removeAll(to);
            indexOfTheFirstWordFromFrom++;
            //indexTo=0; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ –¢–æ, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–ª–æ–≤–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤–æ–π
            indexFrom = 0; // –∏–Ω–¥–µ–∫—Å –≤ –º–∞—Å—Å–∏–≤–µ from, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π
            to.add(from.get(indexOfTheFirstWordFromFrom)); // –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–∞—Å—Å–∏–≤ –¢–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
            from.remove(indexOfTheFirstWordFromFrom); // —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ from –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤ –¢–æ —Å–ª–æ–≤–æ
        }

        System.out.println("to: " + to);
        return to;
    }
}

/*
package com.javarush.task.task22.task2209;

/*
–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–ª–æ–≤
–°–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ø–æ—á–∫—É —Å–ª–æ–≤
–í –º–µ—Ç–æ–¥–µ main —Å—á–∏—Ç–∞–π —Å –∫–æ–Ω—Å–æ–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞,
–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–æ–º.
–í –º–µ—Ç–æ–¥–µ getLine –∏—Å–ø–æ–ª—å–∑—É—è StringBuilder
 —Ä–∞—Å—Å—Ç–∞–≤—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
 —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞ –¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
 —Å–æ–≤–ø–∞–¥–∞–ª–∞ —Å –ø–µ—Ä–≤–æ–π –±—É–∫–≤–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–µ —É—á–∏—Ç—ã–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä.
–ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å 1 —Ä–∞–∑.
–°—á–∏—Ç–∞–π, —á—Ç–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ
—Å–ø–∏—Å–∫–∞ –º–æ–≥—É—Ç (–∏ –¥–æ–ª–∂–Ω—ã!) –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –Ω–µ—Ç).
–ú–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª—é–±–æ–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
–≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–∞–∫–æ–≤—ã—Ö (—Å–º. –ø—Ä–∏–º–µ—Ä).
–°–ª–æ–≤–∞ —Ä–∞–∑–¥–µ–ª—è—Ç—å –ø—Ä–æ–±–µ–ª–æ–º.
–í—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —ç–∫—Ä–∞–Ω.

–ü—Ä–∏–º–µ—Ä —Ç–µ–ª–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:
–ö–∏–µ–≤ –ù—å—é-–ô–æ—Ä–∫ –ê–º—Å—Ç–µ—Ä–¥–∞–º –í–µ–Ω–∞ –ú–µ–ª—å–±—É—Ä–Ω

–†–µ–∑—É–ª—å—Ç–∞—Ç:
–ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤ –í–µ–Ω–∞
–∏–ª–∏
–í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º –ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤
–∏–ª–∏
–ú–µ–ª—å–±—É—Ä–Ω –ù—å—é-–ô–æ—Ä–∫ –ö–∏–µ–≤ –í–µ–Ω–∞ –ê–º—Å—Ç–µ—Ä–¥–∞–º
–∏ —Ç.–ø.


Requirements:
1. –ú–µ—Ç–æ–¥ main –¥–æ–ª–∂–µ–Ω —Å—á–∏—Ç—ã–≤–∞—Ç—å –∏–º—è —Ñ–∞–π–ª–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
2. –í –∫–ª–∞—Å—Å–µ Solution –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π.
3. –í –º–µ—Ç–æ–¥–µ getLine –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω StringBuilder.
4. –ú–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
(–ø—É—Å—Ç–æ–π StringBuilder) –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –µ–º—É –Ω–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–≤–∞).
5. –ú–µ—Ç–æ–¥ getLine –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω—è—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–æ–≤–∞).
6. –í—Å–µ —Å–ª–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–æ–¥ getLine –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Å—Ç—Ä–æ–∫—É.
7. –í—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —É—Å–ª–æ–≤–∏—é –∑–∞–¥–∞—á–∏.


public class Solution {
    public static void main(String[] args) {
        //...
        StringBuilder result = getLine();
        System.out.println(result.toString());
    }

    public static StringBuilder getLine(String... words) {
        return null;
    }
}

 */