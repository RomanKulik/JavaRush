Игра сапер (8/16)
Согласно правилам игры, в помощь игроку даются флаги. Они нужны, чтобы помечать потенциально "заминированные" ячейки. Поэтому количество флагов countFlags должно равняться количеству мин countMinesOnField.

Флаг нужно как-то показывать на игровом поле. Для этого создадим переменную-константу, которая будет хранить его символ. У каждой ячейки модели должно быть состояние isFlag, которое покажет нам, помечена ли ячейка флагом или нет.


Требования:
1. В классе MinesweeperGame должно существовать приватное статическое final поле String FLAG, инициализированное при объявлении. Например, использовать можно UTF-16 символ флага "\uD83D\uDEA9".
2. В классе MinesweeperGame должно существовать приватное поле countFlags типа int, в котором будет храниться количество неиспользованных флагов.
3. В методе createGame() должно устанавливаться значение поля countFlags равное countMinesOnField.
4. В классе GameObject должно существовать публичное поле isFlag типа boolean.

Игра сапер (7/16)
На данном этапе мы займемся открытием ячеек. Давай создадим метод, отвечающий за это, и переменную, которая будет хранить состояние ячейки (открыта или нет).

При открытии ячейки метод будет:

- рисовать в ячейке мину, если там мина;
- отображать количество мин-соседей, если в ячейке нет мины;
- отмечать ячейку модели открытой;
- менять цвет ячейки.
Символ мины для удобства предлагаем вынести в отдельную переменную-константу. Когда ячейка должна открываться? Правильно, при клике по ней левой кнопкой мыши. Для обработки такого нажатия существует специальный метод движка — onMouseLeftClick(int, int).

Давай переопределим его в нашем классе. Он будет вызывать метод открытия ячейки.

Ну и, конечно же, запусти программу и насладись результатом работы.


Требования:
1. В классе MinesweeperGame должно существовать приватное статическое final поле String MINE, инициализированное при объявлении. Например, использовать можно UTF-16 символ мины "\uD83D\uDCA3".
2. В классе MinesweeperGame должен существовать приватный метод void openTile(int x, int y).
3. Метод openTile(int, int) должен отрисовывать MINE, если gameObject по текущим координатам является миной. Используй метод setCellValue(int, int, String).
4. Метод openTile(int, int) должен отрисовывать количество соседей-мин, если gameObject по текущим координатам не является миной. Используй метод setCellNumber(int, int, int).
5. В классе GameObject должно существовать публичное поле isOpen типа boolean.
6. В методе openTile(int, int) элементу матрицы gameField должно устанавливаться значение поля isOpen, равное true, и отрисовываться фон ячейки с помощью метода setCellColor(int, int, Color). Например, в Color.GREEN.
7. В классе MinesweeperGame должен быть переопределен метод onMouseLeftClick(int, int) родительского класса Game.
8. В методе onMouseLeftClick(int, int) должен быть вызван метод openTile(int, int).

Игра сапер (6/16)
Теперь давай займемся подсчетом мин в соседних ячейках. Для этого каждой ячейке матрицы добавим параметр (поле класса), который отвечает за количество "заминированных" соседей.

Для начала найдем всех соседей, а потом посчитаем, сколько из них "заминированы". Для получения списка соседей у тебя появился метод getNeighbors, который принимает один параметр типа GameObject (ячейку).

И, наконец, в отдельном методе мы посчитаем количество "заминированных" соседей для каждой ячейки gameField и внесем это значение в соответствующее поле ячейки матрицы

Хотя визуально твоя работа не видна (ты же запустил программу, чтобы посмотреть что получилось?), она очень важна для будущих шагов..


Требования:
1. В классе GameObject должно существовать публичное поле countMineNeighbors типа int.
2. В классе MinesweeperGame должен существовать приватный void метод countMineNeighbors().
3. Метод countMineNeighbors() должен для каждой ячейки "не мины" из матрицы gameField подсчитать количество соседних ячеек "мин" и установить это значение в поле countMineNeighbors.
4. В методе countMineNeighbors() должен использоваться метод getNeighbors(GameObject gameObject).
5. В методе createGame() после создания всех элементов матрицы gameField должен быть вызван метод countMineNeighbors().

Игра сапер (5/16)
Игра "Сапер" не зря так называется. Игроку нужно будет иметь дело с минами, хотя лучше с ними дела не иметь :)

Давай введем в игру эти самые мины. Для этого в класс GameObject внесем изменения, которые учитывают, что ячейка может быть миной — это флаг isMine.

Новый конструктор создавать не нужно: достаточно отредактировать существующий.

Кроме того, при создании ячеек матрицы добавь генерацию мин с вероятностью 10%. Самый простой способ это сделать — использовать метод getRandomNumber(int n) класса Game, который возвращает случайное число от 0 до n-1 включительно. Следовательно, вероятность генерации определенного числа равна 1/n.

Также не забудь посчитать количество сгенерированных мин в классе MinesweeperGame.

Если все сделал, запусти программу и проверь, что ничего не поломалось :)


Требования:
1. В классе GameObject должно существовать публичное поле isMine типа boolean.
2. В классе GameObject должен существовать один конструктор с тремя параметрами типа int, int, boolean, который устанавливает соответствующие значения полям x, y и isMine в указанном порядке.
3. В классе MinesweeperGame должно существовать приватное поле countMinesOnField типа int.
4. В методе createGame() при создании ячеек должно случайным образом задаваться, будет ли эта ячейка с миной. Используй метод getRandomNumber(int) класса Game с параметром 10.
5. После выполнения метода createGame() полю countMinesOnField должно быть присвоено значение количества мин на поле.

Игра сапер (4/16)
Состояние ячеек игрового поля нужно где-то хранить. Для этой задачи создадим матрицу (двумерный массив) с размерами игрового поля. Чтобы увидеть состояние игры на экране, нам нужно передать в отображение данные из матрицы. Отображение отвечает только за визуальную информацию и смысловой нагрузки не несет.

В этом нам поможет метод setCellColor(int, int, Color) класса Game, параметры которого — координаты и цвет ячейки. Давай вызовем его и передадим координаты каждой ячейки матрицы и любой цвет (например, Color.ORANGE).

Предлагаем вынести отрисовку матрицы на отображении в отдельный метод createGame(), который потом вызовем из метода initialize(). Запусти программу и посмотри, что получилось.

Подсказка: чтобы вызвать метод setCellColor(int, int, Color) для каждой ячейки матрицы, воспользуйся циклами.


Требования:
1. В классе MinesweeperGame должна существовать приватная матрица (двумерный массив) gameField с типом GameObject[][] и размером SIDEхSIDE.
2. В классе MinesweeperGame должен существовать приватный метод void createGame().
3. В методе createGame() нужно заполнить все ячейки массива gameField новыми объектами типа GameObject с соответствующими координатами x и y.
4. В методе createGame() для каждой ячейки массива gameField нужно вызвать метод setCellColor(int, int, Color) с параметрами: координаты x и y, а также любой цвет (например, Color.ORANGE).
5. В методе initialize() должен быть вызван метод createGame().

Игра сапер (3/16)
Так как в нашей игре будут использоваться игровые объекты (ячейки), создадим для их описания отдельный класс GameObject.

Давай подумаем, какие параметры должны быть у игрового объекта? Конечно же, это координаты его размещения на игровом поле, x и y. Ну и куда же без конструктора? После того, как все сделаешь, не забудь запустить программу и посмотреть на результат.


Требования:
1. Должен существовать публичный класс GameObject.
2. В классе GameObject должно существовать публичное поле x типа int.
3. В классе GameObject должно существовать публичное поле y типа int.
4. В классе GameObject должен существовать один конструктор с двумя параметрами типа int, который устанавливает соответствующие значения полям x и y в указанном порядке.

Игра сапер (2/16)
Наше игровое поле какое-то маленькое, тебе не кажется? Нам нужно игровое поле размером 9х9 ячеек.

Для указания размерности в движке существует метод setScreenSize(int, int), который принимает параметрами ширину и высоту (количество ячеек по ширине и высоте).

Поскольку поле квадратное, размерность удобно вынести в отдельную приватную переменную-константу SIDE. Точкой входа в наш игровой движок является метод initialize(). Поэтому переопредели его в классе MinesweeperGame, и в этом методе вызови метод setScreenSize с аргументами SIDE и SIDE.

Обязательно проверь результат своей работы — запусти программу.


Требования:
1. В классе MinesweeperGame должна быть объявлена переменная SIDE.
2. Переменная SIDE должна быть private, static, final и иметь тип int.
3. Переменная SIDE должна быть проинициализирована значением 9 при объявлении.
4. В классе MinesweeperGame должен быть метод public void initialize().
5. В методе initialize() должен быть вызван метод setScreenSize(int, int) класса Game c параметрами SIDE и SIDE.

Игра сапер (1/16)
Давай напишем увлекательную игру "Сапер".

Правила игры:

Игровое поле разделено на смежные ячейки (квадраты), некоторые из которых «заминированы».
Цель игры — разминировать поле, то есть открыть все ячейки без мин.
Если открыта ячейка с миной, игра считается проигранной. Мины расставляются в случайном порядке.
Если под открытой ячейкой мины нет, в ней появляется число, показывающее, сколько соседствующих с открытой ячейкой "заминировано". Используя эти числа, можно рассчитать расположение мин.
Если под соседними ячейками тоже нет мин, открывается некоторая "незаминированная" область до ячеек, в которых есть цифры.
"Заминированные" ячейки можно помечать флагом, чтобы случайно не открыть их. Количество флагов равно количеству мин на игровом поле.
Если все "незаминированные" ячейки открыты, игра считается выигранной.
Теперь приступаем к реализации игры:

Для начала создадим класс игры MinesweeperGame, который будет реализовывать логику игры. Данный класс должен быть унаследован от класса Game, который является частью крутого "игрового движка" JavaRush.

Этот и другие классы "движка" находятся в пакете com.javarush.engine.cell, и чтобы ими пользоваться, класс MinesweeperGame должен содержать такой импорт:
import com.javarush.engine.cell.*;

Если ты все сделал правильно, после запуска приложения увидишь игровое поле.

Прежде чем ты начнешь, советуем прочесть статью про раздел "Игры". В ней ты найдешь информацию, которая будет полезна при написании игр.

Требования:
1. Должен существовать публичный класс MinesweeperGame.
2. Класс MinesweeperGame должен быть наследником класса Game.
3. В классе MinesweeperGame должен быть импорт всего содержимого пакета com.javarush.engine.cell.